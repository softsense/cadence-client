// Copyright (c) 2017-2021 Uber Technologies Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by mockery v2.16.0. DO NOT EDIT.

package internal

import mock "github.com/stretchr/testify/mock"

// mockLocalDispatcher is an autogenerated mock type for the localDispatcher type
type mockLocalDispatcher struct {
	mock.Mock
}

type mockLocalDispatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLocalDispatcher) EXPECT() *mockLocalDispatcher_Expecter {
	return &mockLocalDispatcher_Expecter{mock: &_m.Mock}
}

// SendTask provides a mock function with given fields: task
func (_m *mockLocalDispatcher) SendTask(task *locallyDispatchedActivityTask) bool {
	ret := _m.Called(task)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*locallyDispatchedActivityTask) bool); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockLocalDispatcher_SendTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTask'
type mockLocalDispatcher_SendTask_Call struct {
	*mock.Call
}

// SendTask is a helper method to define mock.On call
//   - task *locallyDispatchedActivityTask
func (_e *mockLocalDispatcher_Expecter) SendTask(task interface{}) *mockLocalDispatcher_SendTask_Call {
	return &mockLocalDispatcher_SendTask_Call{Call: _e.mock.On("SendTask", task)}
}

func (_c *mockLocalDispatcher_SendTask_Call) Run(run func(task *locallyDispatchedActivityTask)) *mockLocalDispatcher_SendTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*locallyDispatchedActivityTask))
	})
	return _c
}

func (_c *mockLocalDispatcher_SendTask_Call) Return(_a0 bool) *mockLocalDispatcher_SendTask_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTnewMockLocalDispatcher interface {
	mock.TestingT
	Cleanup(func())
}

// newMockLocalDispatcher creates a new instance of mockLocalDispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockLocalDispatcher(t mockConstructorTestingTnewMockLocalDispatcher) *mockLocalDispatcher {
	mock := &mockLocalDispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
